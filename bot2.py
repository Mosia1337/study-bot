"""
Study Assistant Bot

–ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º:
1. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å —Ç–æ–∫–µ–Ω–æ–º –±–æ—Ç–∞
2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Tesseract OCR (–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤ README)
"""

import os
import asyncio
import logging
import sqlite3
import pytesseract
import wikipediaapi
import aiohttp
import sys
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from dotenv import load_dotenv
from PIL import Image, UnidentifiedImageError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("bot.log", encoding="utf-8")
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(dotenv_path='.env')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ .env")
    print("–û–®–ò–ë–ö–ê: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ .env")
    print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –≤ –ø–∞–ø–∫–µ —Å –±–æ—Ç–æ–º –∏ –¥–æ–±–∞–≤—å—Ç–µ —Å—Ç—Ä–æ–∫—É:")
    print("BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–±–æ—Ç–∞")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_states = {}


# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite
def init_db():
    try:
        with sqlite3.connect('study_bot.db') as conn:
            c = conn.cursor()
            c.execute('''CREATE TABLE IF NOT EXISTS users
                         (
                             user_id
                             INTEGER
                             PRIMARY
                             KEY,
                             last_active
                             TEXT
                         )''')
            c.execute('''CREATE TABLE IF NOT EXISTS summaries
                         (
                             id
                             INTEGER
                             PRIMARY
                             KEY
                             AUTOINCREMENT,
                             user_id
                             INTEGER,
                             topic
                             TEXT,
                             content
                             TEXT,
                             created_at
                             TEXT
                             DEFAULT
                             CURRENT_TIMESTAMP
                         )''')
            conn.commit()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
init_db()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def study_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="üìù –°–¥–µ–ª–∞—Ç—å –∫–æ–Ω—Å–ø–µ–∫—Ç"))
    builder.add(KeyboardButton(text="üîç –ù–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"))
    builder.add(KeyboardButton(text="üñºÔ∏è –†–µ—à–∏—Ç—å –ø–æ —Ñ–æ—Ç–æ"))
    builder.add(KeyboardButton(text="üìö –ú–æ–∏ –∫–æ–Ω—Å–ø–µ–∫—Ç—ã"))
    builder.add(KeyboardButton(text="üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ñ–æ—Ä–º—É–ª"))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    user_id = message.from_user.id
    try:
        with sqlite3.connect('study_bot.db') as conn:
            c = conn.cursor()
            c.execute("INSERT OR IGNORE INTO users (user_id, last_active) VALUES (?, ?)",
                      (user_id, datetime.now().isoformat()))
            conn.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    await message.answer(
        "üìö –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —É—á–µ–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫.\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=study_keyboard()
    )


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Å–ø–µ–∫—Ç–∞ —Å –ø–æ–º–æ—â—å—é Wikipedia
async def generate_summary(topic: str) -> str:
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Wikipedia API
        wiki = wikipediaapi.Wikipedia('ru', timeout=10)
        page = wiki.page(topic)

        if not page.exists():
            return "üò¢ –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å."

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Å–ø–µ–∫—Ç
        sections = []
        for section in page.sections:
            sections.append(f"## {section.title}\n{section.text[:500]}...")

        return f"üìò –ö–æ–Ω—Å–ø–µ–∫—Ç –ø–æ —Ç–µ–º–µ '{topic}':\n\n" + "\n\n".join(sections[:5])  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 5 —Ä–∞–∑–¥–µ–ª–∞–º–∏
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Wikipedia: {e}")
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Ç–µ–º—É."


# –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
async def search_info(query: str) -> str:
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API DuckDuckGo
        async with aiohttp.ClientSession() as session:
            async with session.get(
                    "https://api.duckduckgo.com/",
                    params={
                        "q": query,
                        "format": "json",
                        "no_redirect": 1,
                        "no_html": 1,
                        "skip_disambig": 1
                    },
                    timeout=10
            ) as response:
                data = await response.json()

        abstract_text = data.get('AbstractText', '')
        if not abstract_text:
            return "üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏–Ω–∞—á–µ."

        source = data.get('AbstractURL', 'DuckDuckGo')
        return f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}':\n\n{abstract_text}\n\n–ò—Å—Ç–æ—á–Ω–∏–∫: {source}"
    except (aiohttp.ClientError, asyncio.TimeoutError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


# –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å —Ñ–æ—Ç–æ
async def ocr_from_photo(image_path: str) -> str:
    try:
        # –ö—Ä–æ—Å—Å-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Tesseract
        tesseract_cmd = os.getenv("TESSERACT_CMD")
        if tesseract_cmd:
            pytesseract.pytesseract.tesseract_cmd = tesseract_cmd
        else:
            # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è Linux/Mac
            if sys.platform != 'win32':
                pytesseract.pytesseract.tesseract_cmd = '/usr/bin/tesseract'

        text = pytesseract.image_to_string(Image.open(image_path), lang='rus+eng')
        return text.strip() or "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —Ñ–æ—Ç–æ"
    except (FileNotFoundError, UnidentifiedImageError, pytesseract.TesseractError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ OCR: {e}")
        error_msg = "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. "
        if isinstance(e, FileNotFoundError):
            error_msg += "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Tesseract —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –ø—É—Ç—å —É–∫–∞–∑–∞–Ω –≤ TESSERACT_CMD"
        return error_msg


# –†–µ—à–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
async def solve_math_problem(text: str) -> str:
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API Wolfram Alpha (–¥–µ–º–æ-—Ä–µ–∂–∏–º)
        async with aiohttp.ClientSession() as session:
            async with session.get(
                    "https://api.wolframalpha.com/v1/result",
                    params={"i": text, "appid": "DEMO"},
                    timeout=15
            ) as response:
                if response.status == 501:
                    return "ü§î –ù–µ –º–æ–≥—É —Ä–µ—à–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—â–µ."

                solution = await response.text()
                return f"üßÆ –†–µ—à–µ–Ω–∏–µ:\n{solution}"
    except (aiohttp.ClientError, asyncio.TimeoutError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é."


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(F.text == "üìù –°–¥–µ–ª–∞—Ç—å –∫–æ–Ω—Å–ø–µ–∫—Ç")
async def handle_summary(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id] = "summary"
    await message.answer("üìñ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∫–æ–Ω—Å–ø–µ–∫—Ç–∞:")


@dp.message(F.text == "üîç –ù–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
async def handle_search(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id] = "search"
    await message.answer("üîé –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å:")


@dp.message(F.text == "üñºÔ∏è –†–µ—à–∏—Ç—å –ø–æ —Ñ–æ—Ç–æ")
async def handle_photo(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id] = "photo"
    await message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –∑–∞–¥–∞—á–µ–π:")


@dp.message(F.text == "üìö –ú–æ–∏ –∫–æ–Ω—Å–ø–µ–∫—Ç—ã")
async def handle_notes(message: types.Message):
    user_id = message.from_user.id
    try:
        with sqlite3.connect('study_bot.db') as conn:
            c = conn.cursor()
            c.execute("SELECT id, topic FROM summaries WHERE user_id = ?", (user_id,))
            notes = c.fetchall()

        if not notes:
            await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤.")
            return

        response = "üìö –í–∞—à–∏ –∫–æ–Ω—Å–ø–µ–∫—Ç—ã:\n\n"
        for i, (note_id, topic) in enumerate(notes, 1):
            response += f"{i}. {topic}\n"

        user_states[user_id] = "show_notes_list"
        await message.answer(response + "\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Å–ø–µ–∫—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤.")


@dp.message(F.text == "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ñ–æ—Ä–º—É–ª")
async def handle_calculator(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id] = "calculator"
    await message.answer("üßÆ –í–≤–µ–¥–∏—Ç–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –∑–∞–¥–∞—á—É:")


@dp.message(F.photo)
async def handle_photo_message(message: types.Message):
    user_id = message.from_user.id
    if user_states.get(user_id) != "photo":
        await message.answer("‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ 'üñºÔ∏è –†–µ—à–∏—Ç—å –ø–æ —Ñ–æ—Ç–æ' –≤ –º–µ–Ω—é.")
        return

    try:
        await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ...")

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        photo = message.photo[-1]
        file = await bot.get_file(photo.file_id)
        os.makedirs("temp", exist_ok=True)
        file_path = f"temp/{file.file_id}.jpg"
        await bot.download_file(file.file_path, file_path)

        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç
        text = await ocr_from_photo(file_path)
        if "–û—à–∏–±–∫–∞" in text:
            await message.answer(text)
        else:
            await message.answer(f"üìñ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{text}\n\n‚è≥ –ò—â—É —Ä–µ—à–µ–Ω–∏–µ...")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Å–ø–µ–∫—Ç
            with sqlite3.connect('study_bot.db') as conn:
                c = conn.cursor()
                c.execute("INSERT INTO summaries (user_id, topic, content) VALUES (?, ?, ?)",
                          (user_id, "–ó–∞–¥–∞—á–∞ —Å —Ñ–æ—Ç–æ", text))
                conn.commit()

            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–µ—à–∏—Ç—å –∫–∞–∫ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É
            solution = await solve_math_problem(text)
            await message.answer(solution)

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(file_path)
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    finally:
        user_states.pop(user_id, None)


@dp.message(F.text)
async def handle_text(message: types.Message):
    user_id = message.from_user.id
    state = user_states.get(user_id)

    if not state:
        await message.answer("‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")
        return

    try:
        if state == "summary":
            await message.answer("‚è≥ –°–æ–∑–¥–∞—é –∫–æ–Ω—Å–ø–µ–∫—Ç...")
            summary = await generate_summary(message.text)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            with sqlite3.connect('study_bot.db') as conn:
                c = conn.cursor()
                c.execute("INSERT INTO summaries (user_id, topic, content) VALUES (?, ?, ?)",
                          (user_id, message.text, summary))
                conn.commit()

            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if len(summary) > 4000:
                for i in range(0, len(summary), 4000):
                    await message.answer(summary[i:i + 4000])
            else:
                await message.answer(summary)

            user_states.pop(user_id, None)

        elif state == "search":
            await message.answer("‚è≥ –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")
            result = await search_info(message.text)
            await message.answer(result)
            user_states.pop(user_id, None)

        elif state == "show_notes_list":
            try:
                note_index = int(message.text) - 1
                with sqlite3.connect('study_bot.db') as conn:
                    c = conn.cursor()
                    c.execute("SELECT topic, content FROM summaries WHERE user_id = ?", (user_id,))
                    notes = c.fetchall()

                if 0 <= note_index < len(notes):
                    topic, content = notes[note_index]
                    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if len(content) > 4000:
                        for i in range(0, len(content), 4000):
                            await message.answer(content[i:i + 4000])
                    else:
                        await message.answer(f"üìò –ö–æ–Ω—Å–ø–µ–∫—Ç: {topic}\n\n{content}")
                else:
                    await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–æ–Ω—Å–ø–µ–∫—Ç–∞.")
            except ValueError:
                await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Å–ø–µ–∫—Ç–∞.")
            finally:
                user_states.pop(user_id, None)

        elif state == "calculator":
            await message.answer("‚è≥ –†–µ—à–∞—é –∑–∞–¥–∞—á—É...")
            solution = await solve_math_problem(message.text)
            await message.answer(solution)
            user_states.pop(user_id, None)

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        user_states.pop(user_id, None)


# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
async def inactivity_check():
    try:
        with sqlite3.connect('study_bot.db') as conn:
            c = conn.cursor()
            c.execute("SELECT user_id, last_active FROM users")
            users = c.fetchall()

        for user_id, last_active in users:
            if not last_active:
                continue
            last_active = datetime.fromisoformat(last_active)
            if datetime.now() - last_active > timedelta(days=3):
                try:
                    await bot.send_message(
                        user_id,
                        "üìö –ù–µ –∑–∞–±—ã–≤–∞–π —É—á–∏—Ç—å—Å—è! –Ø –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –∫–æ–Ω—Å–ø–µ–∫—Ç–∞–º–∏ –∏ –∑–∞–¥–∞—á–∞–º–∏."
                    )
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    c.execute("UPDATE users SET last_active = ? WHERE user_id = ?",
                              (datetime.now().isoformat(), user_id))
                    conn.commit()
                except Exception:
                    pass  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")


# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
async def scheduler():
    while True:
        await asyncio.sleep(3600)  # –ö–∞–∂–¥—ã–π —á–∞—Å
        await inactivity_check()


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
    os.makedirs("temp", exist_ok=True)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    asyncio.create_task(scheduler())

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")